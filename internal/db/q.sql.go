// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: q.sql

package sqlc

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const createDomain = `-- name: CreateDomain :one
INSERT INTO domains 
    (domain, key, dkim_private_key, dkim_public_key)
    VALUES ($1, $2, $3, $4) 
    RETURNING id, domain, created_at, key, dkim_private_key, dkim_public_key
`

type CreateDomainParams struct {
	Domain         string
	Key            string
	DkimPrivateKey string
	DkimPublicKey  string
}

func (q *Queries) CreateDomain(ctx context.Context, arg CreateDomainParams) (Domain, error) {
	row := q.queryRow(ctx, q.createDomainStmt, createDomain,
		arg.Domain,
		arg.Key,
		arg.DkimPrivateKey,
		arg.DkimPublicKey,
	)
	var i Domain
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.CreatedAt,
		&i.Key,
		&i.DkimPrivateKey,
		&i.DkimPublicKey,
	)
	return i, err
}

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages
    (message_id, subject, sender_email, sender_alias, template_id, domain) VALUES
    ($1, $2, $3, $4, $5, $6) RETURNING message_id, subject, sender_email, sender_alias, template_id, domain
`

type CreateMessageParams struct {
	MessageID   string
	Subject     string
	SenderEmail string
	SenderAlias string
	TemplateID  string
	Domain      string
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.queryRow(ctx, q.createMessageStmt, createMessage,
		arg.MessageID,
		arg.Subject,
		arg.SenderEmail,
		arg.SenderAlias,
		arg.TemplateID,
		arg.Domain,
	)
	var i Message
	err := row.Scan(
		&i.MessageID,
		&i.Subject,
		&i.SenderEmail,
		&i.SenderAlias,
		&i.TemplateID,
		&i.Domain,
	)
	return i, err
}

const createPool = `-- name: CreatePool :many
INSERT INTO sending_pool_emails
    (email, status, scheduled_time, original_scheduled_time, message_id)
(
    SELECT
        email,
        'scheduled',
        $1,
        $1,
        $2
    FROM
        UNNEST($3::varchar[]) as email
)
RETURNING id, status, scheduled_time, original_scheduled_time, send_attempts_cnt, email, message_id, error_msg, error_code
`

type CreatePoolParams struct {
	ScheduledTime time.Time
	MessageID     string
	Emails        []string
}

func (q *Queries) CreatePool(ctx context.Context, arg CreatePoolParams) ([]SendingPoolEmail, error) {
	rows, err := q.query(ctx, q.createPoolStmt, createPool, arg.ScheduledTime, arg.MessageID, pq.Array(arg.Emails))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SendingPoolEmail
	for rows.Next() {
		var i SendingPoolEmail
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.ScheduledTime,
			&i.OriginalScheduledTime,
			&i.SendAttemptsCnt,
			&i.Email,
			&i.MessageID,
			&i.ErrorMsg,
			&i.ErrorCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createTemplate = `-- name: CreateTemplate :one
INSERT INTO templates (template_id, html, domain)
    VALUES ($1, $2, $3)
    RETURNING id, template_id, html, domain
`

type CreateTemplateParams struct {
	TemplateID string
	Html       string
	Domain     string
}

func (q *Queries) CreateTemplate(ctx context.Context, arg CreateTemplateParams) (Template, error) {
	row := q.queryRow(ctx, q.createTemplateStmt, createTemplate, arg.TemplateID, arg.Html, arg.Domain)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.TemplateID,
		&i.Html,
		&i.Domain,
	)
	return i, err
}

const findDomain = `-- name: FindDomain :one
SELECT
    id, domain, created_at, key, dkim_private_key, dkim_public_key
FROM domains
    WHERE domain = $1
`

func (q *Queries) FindDomain(ctx context.Context, domain string) (Domain, error) {
	row := q.queryRow(ctx, q.findDomainStmt, findDomain, domain)
	var i Domain
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.CreatedAt,
		&i.Key,
		&i.DkimPrivateKey,
		&i.DkimPublicKey,
	)
	return i, err
}

const findDomainWithKey = `-- name: FindDomainWithKey :one
SELECT id, domain, created_at, key, dkim_private_key, dkim_public_key FROM domains
WHERE domain = $1
AND key = $2
`

type FindDomainWithKeyParams struct {
	Domain string
	Key    string
}

func (q *Queries) FindDomainWithKey(ctx context.Context, arg FindDomainWithKeyParams) (Domain, error) {
	row := q.queryRow(ctx, q.findDomainWithKeyStmt, findDomainWithKey, arg.Domain, arg.Key)
	var i Domain
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.CreatedAt,
		&i.Key,
		&i.DkimPrivateKey,
		&i.DkimPublicKey,
	)
	return i, err
}

const findTemplate = `-- name: FindTemplate :one
SELECT id, template_id, html, domain FROM templates
WHERE template_id = $1
AND domain = $2
`

type FindTemplateParams struct {
	TemplateID string
	Domain     string
}

func (q *Queries) FindTemplate(ctx context.Context, arg FindTemplateParams) (Template, error) {
	row := q.queryRow(ctx, q.findTemplateStmt, findTemplate, arg.TemplateID, arg.Domain)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.TemplateID,
		&i.Html,
		&i.Domain,
	)
	return i, err
}

const getAllDomains = `-- name: GetAllDomains :many
SELECT
    id, domain, created_at, key, dkim_private_key, dkim_public_key
FROM domains
`

func (q *Queries) GetAllDomains(ctx context.Context) ([]Domain, error) {
	rows, err := q.query(ctx, q.getAllDomainsStmt, getAllDomains)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Domain
	for rows.Next() {
		var i Domain
		if err := rows.Scan(
			&i.ID,
			&i.Domain,
			&i.CreatedAt,
			&i.Key,
			&i.DkimPrivateKey,
			&i.DkimPublicKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDomains = `-- name: GetDomains :many
SELECT id, domain, created_at, key, dkim_private_key, dkim_public_key FROM domains
`

func (q *Queries) GetDomains(ctx context.Context) ([]Domain, error) {
	rows, err := q.query(ctx, q.getDomainsStmt, getDomains)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Domain
	for rows.Next() {
		var i Domain
		if err := rows.Scan(
			&i.ID,
			&i.Domain,
			&i.CreatedAt,
			&i.Key,
			&i.DkimPrivateKey,
			&i.DkimPublicKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSendingData = `-- name: GetSendingData :one
SELECT
    t.html,
    m.domain,
    d.dkim_private_key,
    d.dkim_public_key,
    m.subject,
    m.message_id,
    m.sender_email,
    m.sender_alias
FROM messages as m
    JOIN templates as t ON t.template_id = m.template_id
    JOIN domains as d ON d.domain = m.domain
    WHERE m.message_id = $1
`

type GetSendingDataRow struct {
	Html           string
	Domain         string
	DkimPrivateKey string
	DkimPublicKey  string
	Subject        string
	MessageID      string
	SenderEmail    string
	SenderAlias    string
}

func (q *Queries) GetSendingData(ctx context.Context, messageID string) (GetSendingDataRow, error) {
	row := q.queryRow(ctx, q.getSendingDataStmt, getSendingData, messageID)
	var i GetSendingDataRow
	err := row.Scan(
		&i.Html,
		&i.Domain,
		&i.DkimPrivateKey,
		&i.DkimPublicKey,
		&i.Subject,
		&i.MessageID,
		&i.SenderEmail,
		&i.SenderAlias,
	)
	return i, err
}

const setDomainKey = `-- name: SetDomainKey :one
UPDATE domains SET key = $1 WHERE domain = $2 RETURNING id, domain, created_at, key, dkim_private_key, dkim_public_key
`

type SetDomainKeyParams struct {
	Key    string
	Domain string
}

func (q *Queries) SetDomainKey(ctx context.Context, arg SetDomainKeyParams) (Domain, error) {
	row := q.queryRow(ctx, q.setDomainKeyStmt, setDomainKey, arg.Key, arg.Domain)
	var i Domain
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.CreatedAt,
		&i.Key,
		&i.DkimPrivateKey,
		&i.DkimPublicKey,
	)
	return i, err
}
