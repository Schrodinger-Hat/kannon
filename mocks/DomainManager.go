// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	sqlc "github.com/ludusrusso/kannon/internal/db"
)

// DomainManager is an autogenerated mock type for the DomainManager type
type DomainManager struct {
	mock.Mock
}

type DomainManager_Expecter struct {
	mock *mock.Mock
}

func (_m *DomainManager) EXPECT() *DomainManager_Expecter {
	return &DomainManager_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *DomainManager) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DomainManager_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type DomainManager_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *DomainManager_Expecter) Close() *DomainManager_Close_Call {
	return &DomainManager_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *DomainManager_Close_Call) Run(run func()) *DomainManager_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DomainManager_Close_Call) Return(_a0 error) *DomainManager_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

// CreateDomain provides a mock function with given fields: ctx, domain
func (_m *DomainManager) CreateDomain(ctx context.Context, domain string) (sqlc.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 sqlc.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) sqlc.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(sqlc.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DomainManager_CreateDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDomain'
type DomainManager_CreateDomain_Call struct {
	*mock.Call
}

// CreateDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - domain string
func (_e *DomainManager_Expecter) CreateDomain(ctx interface{}, domain interface{}) *DomainManager_CreateDomain_Call {
	return &DomainManager_CreateDomain_Call{Call: _e.mock.On("CreateDomain", ctx, domain)}
}

func (_c *DomainManager_CreateDomain_Call) Run(run func(ctx context.Context, domain string)) *DomainManager_CreateDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DomainManager_CreateDomain_Call) Return(_a0 sqlc.Domain, _a1 error) *DomainManager_CreateDomain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindDomain provides a mock function with given fields: ctx, domain
func (_m *DomainManager) FindDomain(ctx context.Context, domain string) (sqlc.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 sqlc.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) sqlc.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(sqlc.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DomainManager_FindDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindDomain'
type DomainManager_FindDomain_Call struct {
	*mock.Call
}

// FindDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - domain string
func (_e *DomainManager_Expecter) FindDomain(ctx interface{}, domain interface{}) *DomainManager_FindDomain_Call {
	return &DomainManager_FindDomain_Call{Call: _e.mock.On("FindDomain", ctx, domain)}
}

func (_c *DomainManager_FindDomain_Call) Run(run func(ctx context.Context, domain string)) *DomainManager_FindDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DomainManager_FindDomain_Call) Return(_a0 sqlc.Domain, _a1 error) *DomainManager_FindDomain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindDomainWithKey provides a mock function with given fields: ctx, domain, key
func (_m *DomainManager) FindDomainWithKey(ctx context.Context, domain string, key string) (sqlc.Domain, error) {
	ret := _m.Called(ctx, domain, key)

	var r0 sqlc.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, string) sqlc.Domain); ok {
		r0 = rf(ctx, domain, key)
	} else {
		r0 = ret.Get(0).(sqlc.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, domain, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DomainManager_FindDomainWithKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindDomainWithKey'
type DomainManager_FindDomainWithKey_Call struct {
	*mock.Call
}

// FindDomainWithKey is a helper method to define mock.On call
//   - ctx context.Context
//   - domain string
//   - key string
func (_e *DomainManager_Expecter) FindDomainWithKey(ctx interface{}, domain interface{}, key interface{}) *DomainManager_FindDomainWithKey_Call {
	return &DomainManager_FindDomainWithKey_Call{Call: _e.mock.On("FindDomainWithKey", ctx, domain, key)}
}

func (_c *DomainManager_FindDomainWithKey_Call) Run(run func(ctx context.Context, domain string, key string)) *DomainManager_FindDomainWithKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DomainManager_FindDomainWithKey_Call) Return(_a0 sqlc.Domain, _a1 error) *DomainManager_FindDomainWithKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAllDomains provides a mock function with given fields: ctx
func (_m *DomainManager) GetAllDomains(ctx context.Context) ([]sqlc.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []sqlc.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []sqlc.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DomainManager_GetAllDomains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllDomains'
type DomainManager_GetAllDomains_Call struct {
	*mock.Call
}

// GetAllDomains is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DomainManager_Expecter) GetAllDomains(ctx interface{}) *DomainManager_GetAllDomains_Call {
	return &DomainManager_GetAllDomains_Call{Call: _e.mock.On("GetAllDomains", ctx)}
}

func (_c *DomainManager_GetAllDomains_Call) Run(run func(ctx context.Context)) *DomainManager_GetAllDomains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DomainManager_GetAllDomains_Call) Return(_a0 []sqlc.Domain, _a1 error) *DomainManager_GetAllDomains_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RegenerateDomainKey provides a mock function with given fields: ctx, domain
func (_m *DomainManager) RegenerateDomainKey(ctx context.Context, domain string) (sqlc.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 sqlc.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) sqlc.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(sqlc.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DomainManager_RegenerateDomainKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegenerateDomainKey'
type DomainManager_RegenerateDomainKey_Call struct {
	*mock.Call
}

// RegenerateDomainKey is a helper method to define mock.On call
//   - ctx context.Context
//   - domain string
func (_e *DomainManager_Expecter) RegenerateDomainKey(ctx interface{}, domain interface{}) *DomainManager_RegenerateDomainKey_Call {
	return &DomainManager_RegenerateDomainKey_Call{Call: _e.mock.On("RegenerateDomainKey", ctx, domain)}
}

func (_c *DomainManager_RegenerateDomainKey_Call) Run(run func(ctx context.Context, domain string)) *DomainManager_RegenerateDomainKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DomainManager_RegenerateDomainKey_Call) Return(_a0 sqlc.Domain, _a1 error) *DomainManager_RegenerateDomainKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewDomainManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewDomainManager creates a new instance of DomainManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDomainManager(t mockConstructorTestingTNewDomainManager) *DomainManager {
	mock := &DomainManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
