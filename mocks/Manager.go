// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	sqlc "github.com/ludusrusso/kannon/internal/db"
	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

type Manager_Expecter struct {
	mock *mock.Mock
}

func (_m *Manager) EXPECT() *Manager_Expecter {
	return &Manager_Expecter{mock: &_m.Mock}
}

// CreateTemplate provides a mock function with given fields: ctx, html, domain, title
func (_m *Manager) CreateTemplate(ctx context.Context, html string, domain string, title string) (sqlc.Template, error) {
	ret := _m.Called(ctx, html, domain, title)

	var r0 sqlc.Template
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) sqlc.Template); ok {
		r0 = rf(ctx, html, domain, title)
	} else {
		r0 = ret.Get(0).(sqlc.Template)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, html, domain, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_CreateTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTemplate'
type Manager_CreateTemplate_Call struct {
	*mock.Call
}

// CreateTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - html string
//   - domain string
//   - title string
func (_e *Manager_Expecter) CreateTemplate(ctx interface{}, html interface{}, domain interface{}, title interface{}) *Manager_CreateTemplate_Call {
	return &Manager_CreateTemplate_Call{Call: _e.mock.On("CreateTemplate", ctx, html, domain, title)}
}

func (_c *Manager_CreateTemplate_Call) Run(run func(ctx context.Context, html string, domain string, title string)) *Manager_CreateTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Manager_CreateTemplate_Call) Return(_a0 sqlc.Template, _a1 error) *Manager_CreateTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateTransientTemplate provides a mock function with given fields: ctx, html, domain
func (_m *Manager) CreateTransientTemplate(ctx context.Context, html string, domain string) (sqlc.Template, error) {
	ret := _m.Called(ctx, html, domain)

	var r0 sqlc.Template
	if rf, ok := ret.Get(0).(func(context.Context, string, string) sqlc.Template); ok {
		r0 = rf(ctx, html, domain)
	} else {
		r0 = ret.Get(0).(sqlc.Template)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, html, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_CreateTransientTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransientTemplate'
type Manager_CreateTransientTemplate_Call struct {
	*mock.Call
}

// CreateTransientTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - html string
//   - domain string
func (_e *Manager_Expecter) CreateTransientTemplate(ctx interface{}, html interface{}, domain interface{}) *Manager_CreateTransientTemplate_Call {
	return &Manager_CreateTransientTemplate_Call{Call: _e.mock.On("CreateTransientTemplate", ctx, html, domain)}
}

func (_c *Manager_CreateTransientTemplate_Call) Run(run func(ctx context.Context, html string, domain string)) *Manager_CreateTransientTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Manager_CreateTransientTemplate_Call) Return(_a0 sqlc.Template, _a1 error) *Manager_CreateTransientTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTemplate provides a mock function with given fields: ctx, templateID
func (_m *Manager) DeleteTemplate(ctx context.Context, templateID string) (sqlc.Template, error) {
	ret := _m.Called(ctx, templateID)

	var r0 sqlc.Template
	if rf, ok := ret.Get(0).(func(context.Context, string) sqlc.Template); ok {
		r0 = rf(ctx, templateID)
	} else {
		r0 = ret.Get(0).(sqlc.Template)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, templateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_DeleteTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTemplate'
type Manager_DeleteTemplate_Call struct {
	*mock.Call
}

// DeleteTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - templateID string
func (_e *Manager_Expecter) DeleteTemplate(ctx interface{}, templateID interface{}) *Manager_DeleteTemplate_Call {
	return &Manager_DeleteTemplate_Call{Call: _e.mock.On("DeleteTemplate", ctx, templateID)}
}

func (_c *Manager_DeleteTemplate_Call) Run(run func(ctx context.Context, templateID string)) *Manager_DeleteTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Manager_DeleteTemplate_Call) Return(_a0 sqlc.Template, _a1 error) *Manager_DeleteTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindTemplate provides a mock function with given fields: ctx, domain, templateID
func (_m *Manager) FindTemplate(ctx context.Context, domain string, templateID string) (sqlc.Template, error) {
	ret := _m.Called(ctx, domain, templateID)

	var r0 sqlc.Template
	if rf, ok := ret.Get(0).(func(context.Context, string, string) sqlc.Template); ok {
		r0 = rf(ctx, domain, templateID)
	} else {
		r0 = ret.Get(0).(sqlc.Template)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, domain, templateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_FindTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTemplate'
type Manager_FindTemplate_Call struct {
	*mock.Call
}

// FindTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - domain string
//   - templateID string
func (_e *Manager_Expecter) FindTemplate(ctx interface{}, domain interface{}, templateID interface{}) *Manager_FindTemplate_Call {
	return &Manager_FindTemplate_Call{Call: _e.mock.On("FindTemplate", ctx, domain, templateID)}
}

func (_c *Manager_FindTemplate_Call) Run(run func(ctx context.Context, domain string, templateID string)) *Manager_FindTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Manager_FindTemplate_Call) Return(_a0 sqlc.Template, _a1 error) *Manager_FindTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTemplate provides a mock function with given fields: ctx, templateID
func (_m *Manager) GetTemplate(ctx context.Context, templateID string) (sqlc.Template, error) {
	ret := _m.Called(ctx, templateID)

	var r0 sqlc.Template
	if rf, ok := ret.Get(0).(func(context.Context, string) sqlc.Template); ok {
		r0 = rf(ctx, templateID)
	} else {
		r0 = ret.Get(0).(sqlc.Template)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, templateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_GetTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplate'
type Manager_GetTemplate_Call struct {
	*mock.Call
}

// GetTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - templateID string
func (_e *Manager_Expecter) GetTemplate(ctx interface{}, templateID interface{}) *Manager_GetTemplate_Call {
	return &Manager_GetTemplate_Call{Call: _e.mock.On("GetTemplate", ctx, templateID)}
}

func (_c *Manager_GetTemplate_Call) Run(run func(ctx context.Context, templateID string)) *Manager_GetTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Manager_GetTemplate_Call) Return(_a0 sqlc.Template, _a1 error) *Manager_GetTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTemplates provides a mock function with given fields: ctx, domain, skip, take
func (_m *Manager) GetTemplates(ctx context.Context, domain string, skip uint, take uint) ([]sqlc.Template, uint, error) {
	ret := _m.Called(ctx, domain, skip, take)

	var r0 []sqlc.Template
	if rf, ok := ret.Get(0).(func(context.Context, string, uint, uint) []sqlc.Template); ok {
		r0 = rf(ctx, domain, skip, take)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.Template)
		}
	}

	var r1 uint
	if rf, ok := ret.Get(1).(func(context.Context, string, uint, uint) uint); ok {
		r1 = rf(ctx, domain, skip, take)
	} else {
		r1 = ret.Get(1).(uint)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, uint, uint) error); ok {
		r2 = rf(ctx, domain, skip, take)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Manager_GetTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplates'
type Manager_GetTemplates_Call struct {
	*mock.Call
}

// GetTemplates is a helper method to define mock.On call
//   - ctx context.Context
//   - domain string
//   - skip uint
//   - take uint
func (_e *Manager_Expecter) GetTemplates(ctx interface{}, domain interface{}, skip interface{}, take interface{}) *Manager_GetTemplates_Call {
	return &Manager_GetTemplates_Call{Call: _e.mock.On("GetTemplates", ctx, domain, skip, take)}
}

func (_c *Manager_GetTemplates_Call) Run(run func(ctx context.Context, domain string, skip uint, take uint)) *Manager_GetTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint), args[3].(uint))
	})
	return _c
}

func (_c *Manager_GetTemplates_Call) Return(_a0 []sqlc.Template, _a1 uint, _a2 error) *Manager_GetTemplates_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

// UpdateTemplate provides a mock function with given fields: ctx, templateID, html, title
func (_m *Manager) UpdateTemplate(ctx context.Context, templateID string, html string, title string) (sqlc.Template, error) {
	ret := _m.Called(ctx, templateID, html, title)

	var r0 sqlc.Template
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) sqlc.Template); ok {
		r0 = rf(ctx, templateID, html, title)
	} else {
		r0 = ret.Get(0).(sqlc.Template)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, templateID, html, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_UpdateTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTemplate'
type Manager_UpdateTemplate_Call struct {
	*mock.Call
}

// UpdateTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - templateID string
//   - html string
//   - title string
func (_e *Manager_Expecter) UpdateTemplate(ctx interface{}, templateID interface{}, html interface{}, title interface{}) *Manager_UpdateTemplate_Call {
	return &Manager_UpdateTemplate_Call{Call: _e.mock.On("UpdateTemplate", ctx, templateID, html, title)}
}

func (_c *Manager_UpdateTemplate_Call) Run(run func(ctx context.Context, templateID string, html string, title string)) *Manager_UpdateTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Manager_UpdateTemplate_Call) Return(_a0 sqlc.Template, _a1 error) *Manager_UpdateTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewManager(t mockConstructorTestingTNewManager) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
