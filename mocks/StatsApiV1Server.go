// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	apiv1 "github.com/ludusrusso/kannon/proto/kannon/stats/apiv1"

	mock "github.com/stretchr/testify/mock"
)

// StatsApiV1Server is an autogenerated mock type for the StatsApiV1Server type
type StatsApiV1Server struct {
	mock.Mock
}

type StatsApiV1Server_Expecter struct {
	mock *mock.Mock
}

func (_m *StatsApiV1Server) EXPECT() *StatsApiV1Server_Expecter {
	return &StatsApiV1Server_Expecter{mock: &_m.Mock}
}

// GetStats provides a mock function with given fields: _a0, _a1
func (_m *StatsApiV1Server) GetStats(_a0 context.Context, _a1 *apiv1.GetStatsReq) (*apiv1.GetStatsRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiv1.GetStatsRes
	if rf, ok := ret.Get(0).(func(context.Context, *apiv1.GetStatsReq) *apiv1.GetStatsRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiv1.GetStatsRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *apiv1.GetStatsReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatsApiV1Server_GetStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStats'
type StatsApiV1Server_GetStats_Call struct {
	*mock.Call
}

// GetStats is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *apiv1.GetStatsReq
func (_e *StatsApiV1Server_Expecter) GetStats(_a0 interface{}, _a1 interface{}) *StatsApiV1Server_GetStats_Call {
	return &StatsApiV1Server_GetStats_Call{Call: _e.mock.On("GetStats", _a0, _a1)}
}

func (_c *StatsApiV1Server_GetStats_Call) Run(run func(_a0 context.Context, _a1 *apiv1.GetStatsReq)) *StatsApiV1Server_GetStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*apiv1.GetStatsReq))
	})
	return _c
}

func (_c *StatsApiV1Server_GetStats_Call) Return(_a0 *apiv1.GetStatsRes, _a1 error) *StatsApiV1Server_GetStats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewStatsApiV1Server interface {
	mock.TestingT
	Cleanup(func())
}

// NewStatsApiV1Server creates a new instance of StatsApiV1Server. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStatsApiV1Server(t mockConstructorTestingTNewStatsApiV1Server) *StatsApiV1Server {
	mock := &StatsApiV1Server{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
