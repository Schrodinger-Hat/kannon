// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	apiv1 "github.com/ludusrusso/kannon/proto/kannon/stats/apiv1"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// StatsApiV1Client is an autogenerated mock type for the StatsApiV1Client type
type StatsApiV1Client struct {
	mock.Mock
}

type StatsApiV1Client_Expecter struct {
	mock *mock.Mock
}

func (_m *StatsApiV1Client) EXPECT() *StatsApiV1Client_Expecter {
	return &StatsApiV1Client_Expecter{mock: &_m.Mock}
}

// GetStats provides a mock function with given fields: ctx, in, opts
func (_m *StatsApiV1Client) GetStats(ctx context.Context, in *apiv1.GetStatsReq, opts ...grpc.CallOption) (*apiv1.GetStatsRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiv1.GetStatsRes
	if rf, ok := ret.Get(0).(func(context.Context, *apiv1.GetStatsReq, ...grpc.CallOption) *apiv1.GetStatsRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiv1.GetStatsRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *apiv1.GetStatsReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatsApiV1Client_GetStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStats'
type StatsApiV1Client_GetStats_Call struct {
	*mock.Call
}

// GetStats is a helper method to define mock.On call
//   - ctx context.Context
//   - in *apiv1.GetStatsReq
//   - opts ...grpc.CallOption
func (_e *StatsApiV1Client_Expecter) GetStats(ctx interface{}, in interface{}, opts ...interface{}) *StatsApiV1Client_GetStats_Call {
	return &StatsApiV1Client_GetStats_Call{Call: _e.mock.On("GetStats",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *StatsApiV1Client_GetStats_Call) Run(run func(ctx context.Context, in *apiv1.GetStatsReq, opts ...grpc.CallOption)) *StatsApiV1Client_GetStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*apiv1.GetStatsReq), variadicArgs...)
	})
	return _c
}

func (_c *StatsApiV1Client_GetStats_Call) Return(_a0 *apiv1.GetStatsRes, _a1 error) *StatsApiV1Client_GetStats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewStatsApiV1Client interface {
	mock.TestingT
	Cleanup(func())
}

// NewStatsApiV1Client creates a new instance of StatsApiV1Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStatsApiV1Client(t mockConstructorTestingTNewStatsApiV1Client) *StatsApiV1Client {
	mock := &StatsApiV1Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
