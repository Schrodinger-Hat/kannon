// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// SenderError is an autogenerated mock type for the SenderError type
type SenderError struct {
	mock.Mock
}

type SenderError_Expecter struct {
	mock *mock.Mock
}

func (_m *SenderError) EXPECT() *SenderError_Expecter {
	return &SenderError_Expecter{mock: &_m.Mock}
}

// Code provides a mock function with given fields:
func (_m *SenderError) Code() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// SenderError_Code_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Code'
type SenderError_Code_Call struct {
	*mock.Call
}

// Code is a helper method to define mock.On call
func (_e *SenderError_Expecter) Code() *SenderError_Code_Call {
	return &SenderError_Code_Call{Call: _e.mock.On("Code")}
}

func (_c *SenderError_Code_Call) Run(run func()) *SenderError_Code_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SenderError_Code_Call) Return(_a0 uint32) *SenderError_Code_Call {
	_c.Call.Return(_a0)
	return _c
}

// Error provides a mock function with given fields:
func (_m *SenderError) Error() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SenderError_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type SenderError_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *SenderError_Expecter) Error() *SenderError_Error_Call {
	return &SenderError_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *SenderError_Error_Call) Run(run func()) *SenderError_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SenderError_Error_Call) Return(_a0 string) *SenderError_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

// IsPermanent provides a mock function with given fields:
func (_m *SenderError) IsPermanent() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SenderError_IsPermanent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPermanent'
type SenderError_IsPermanent_Call struct {
	*mock.Call
}

// IsPermanent is a helper method to define mock.On call
func (_e *SenderError_Expecter) IsPermanent() *SenderError_IsPermanent_Call {
	return &SenderError_IsPermanent_Call{Call: _e.mock.On("IsPermanent")}
}

func (_c *SenderError_IsPermanent_Call) Run(run func()) *SenderError_IsPermanent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SenderError_IsPermanent_Call) Return(_a0 bool) *SenderError_IsPermanent_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewSenderError interface {
	mock.TestingT
	Cleanup(func())
}

// NewSenderError creates a new instance of SenderError. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSenderError(t mockConstructorTestingTNewSenderError) *SenderError {
	mock := &SenderError{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
