// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	statssec "github.com/ludusrusso/kannon/internal/statssec"
	mock "github.com/stretchr/testify/mock"
)

// StatsService is an autogenerated mock type for the StatsService type
type StatsService struct {
	mock.Mock
}

type StatsService_Expecter struct {
	mock *mock.Mock
}

func (_m *StatsService) EXPECT() *StatsService_Expecter {
	return &StatsService_Expecter{mock: &_m.Mock}
}

// CreateLinkToken provides a mock function with given fields: ctx, messageID, email, url
func (_m *StatsService) CreateLinkToken(ctx context.Context, messageID string, email string, url string) (string, error) {
	ret := _m.Called(ctx, messageID, email, url)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, messageID, email, url)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, messageID, email, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatsService_CreateLinkToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLinkToken'
type StatsService_CreateLinkToken_Call struct {
	*mock.Call
}

// CreateLinkToken is a helper method to define mock.On call
//   - ctx context.Context
//   - messageID string
//   - email string
//   - url string
func (_e *StatsService_Expecter) CreateLinkToken(ctx interface{}, messageID interface{}, email interface{}, url interface{}) *StatsService_CreateLinkToken_Call {
	return &StatsService_CreateLinkToken_Call{Call: _e.mock.On("CreateLinkToken", ctx, messageID, email, url)}
}

func (_c *StatsService_CreateLinkToken_Call) Run(run func(ctx context.Context, messageID string, email string, url string)) *StatsService_CreateLinkToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *StatsService_CreateLinkToken_Call) Return(_a0 string, _a1 error) *StatsService_CreateLinkToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateOpenToken provides a mock function with given fields: ctx, messageID, email
func (_m *StatsService) CreateOpenToken(ctx context.Context, messageID string, email string) (string, error) {
	ret := _m.Called(ctx, messageID, email)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, messageID, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, messageID, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatsService_CreateOpenToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOpenToken'
type StatsService_CreateOpenToken_Call struct {
	*mock.Call
}

// CreateOpenToken is a helper method to define mock.On call
//   - ctx context.Context
//   - messageID string
//   - email string
func (_e *StatsService_Expecter) CreateOpenToken(ctx interface{}, messageID interface{}, email interface{}) *StatsService_CreateOpenToken_Call {
	return &StatsService_CreateOpenToken_Call{Call: _e.mock.On("CreateOpenToken", ctx, messageID, email)}
}

func (_c *StatsService_CreateOpenToken_Call) Run(run func(ctx context.Context, messageID string, email string)) *StatsService_CreateOpenToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StatsService_CreateOpenToken_Call) Return(_a0 string, _a1 error) *StatsService_CreateOpenToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// VertifyLinkToken provides a mock function with given fields: ctx, token
func (_m *StatsService) VertifyLinkToken(ctx context.Context, token string) (*statssec.LinkClaims, error) {
	ret := _m.Called(ctx, token)

	var r0 *statssec.LinkClaims
	if rf, ok := ret.Get(0).(func(context.Context, string) *statssec.LinkClaims); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*statssec.LinkClaims)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatsService_VertifyLinkToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VertifyLinkToken'
type StatsService_VertifyLinkToken_Call struct {
	*mock.Call
}

// VertifyLinkToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *StatsService_Expecter) VertifyLinkToken(ctx interface{}, token interface{}) *StatsService_VertifyLinkToken_Call {
	return &StatsService_VertifyLinkToken_Call{Call: _e.mock.On("VertifyLinkToken", ctx, token)}
}

func (_c *StatsService_VertifyLinkToken_Call) Run(run func(ctx context.Context, token string)) *StatsService_VertifyLinkToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *StatsService_VertifyLinkToken_Call) Return(_a0 *statssec.LinkClaims, _a1 error) *StatsService_VertifyLinkToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// VertifyOpenToken provides a mock function with given fields: ctx, token
func (_m *StatsService) VertifyOpenToken(ctx context.Context, token string) (*statssec.OpenClaims, error) {
	ret := _m.Called(ctx, token)

	var r0 *statssec.OpenClaims
	if rf, ok := ret.Get(0).(func(context.Context, string) *statssec.OpenClaims); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*statssec.OpenClaims)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatsService_VertifyOpenToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VertifyOpenToken'
type StatsService_VertifyOpenToken_Call struct {
	*mock.Call
}

// VertifyOpenToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *StatsService_Expecter) VertifyOpenToken(ctx interface{}, token interface{}) *StatsService_VertifyOpenToken_Call {
	return &StatsService_VertifyOpenToken_Call{Call: _e.mock.On("VertifyOpenToken", ctx, token)}
}

func (_c *StatsService_VertifyOpenToken_Call) Run(run func(ctx context.Context, token string)) *StatsService_VertifyOpenToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *StatsService_VertifyOpenToken_Call) Return(_a0 *statssec.OpenClaims, _a1 error) *StatsService_VertifyOpenToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewStatsService interface {
	mock.TestingT
	Cleanup(func())
}

// NewStatsService creates a new instance of StatsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStatsService(t mockConstructorTestingTNewStatsService) *StatsService {
	mock := &StatsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
