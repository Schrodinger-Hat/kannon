// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	sqlc "github.com/ludusrusso/kannon/internal/db"

	types "github.com/ludusrusso/kannon/proto/kannon/mailer/types"
)

// MailBulder is an autogenerated mock type for the MailBulder type
type MailBulder struct {
	mock.Mock
}

type MailBulder_Expecter struct {
	mock *mock.Mock
}

func (_m *MailBulder) EXPECT() *MailBulder_Expecter {
	return &MailBulder_Expecter{mock: &_m.Mock}
}

// BuildEmail provides a mock function with given fields: ctx, email
func (_m *MailBulder) BuildEmail(ctx context.Context, email sqlc.SendingPoolEmail) (*types.EmailToSend, error) {
	ret := _m.Called(ctx, email)

	var r0 *types.EmailToSend
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.SendingPoolEmail) *types.EmailToSend); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.EmailToSend)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqlc.SendingPoolEmail) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MailBulder_BuildEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildEmail'
type MailBulder_BuildEmail_Call struct {
	*mock.Call
}

// BuildEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email sqlc.SendingPoolEmail
func (_e *MailBulder_Expecter) BuildEmail(ctx interface{}, email interface{}) *MailBulder_BuildEmail_Call {
	return &MailBulder_BuildEmail_Call{Call: _e.mock.On("BuildEmail", ctx, email)}
}

func (_c *MailBulder_BuildEmail_Call) Run(run func(ctx context.Context, email sqlc.SendingPoolEmail)) *MailBulder_BuildEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.SendingPoolEmail))
	})
	return _c
}

func (_c *MailBulder_BuildEmail_Call) Return(_a0 *types.EmailToSend, _a1 error) *MailBulder_BuildEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMailBulder interface {
	mock.TestingT
	Cleanup(func())
}

// NewMailBulder creates a new instance of MailBulder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMailBulder(t mockConstructorTestingTNewMailBulder) *MailBulder {
	mock := &MailBulder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
